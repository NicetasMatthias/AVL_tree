Q: На самом деле я считаю, что узел это класс, а не стуктура, но тут как ты реализуешь.
И не нужно ли хранить ссылку еще на parent в узле?
A: Я представляю дерево как класс, потому что хочу видеть дерево как целостную структуру данных.
В идеале пользователю даже не надо знать что данные хранятся в виде дерева.
В данной реализации нет необходимости в хранении ссылки на parent, почти все функции, работающие с деревом рекурсивны.

Q: Где используется АВЛ деревья. Дай краткую классификацию на этот тип дерева.
A: АВЛ деревья это двоичное дерево поиска с дополнительным условием сбалансированности,которое гарантирует логарифмическую сложность
основных операций. АВЛ деревья как и простые двоичные деревья поиск используются когда нужно иметь возможность быстро
добавлять или удалять данные, а также быстро находить данные (или факт их отсутствия). Также АВЛ деревья (как и простые двоичные
деревья поиска позволяют сортировать данные)

Q: Какой способ поиска эффективнее: в ширину или глубину?
A: Если говорить про конкретно АВЛ дерево, как и в обычном дереве поиска эфективнее будет поиск продиктованый структурой построения
дерева (если искомый элемент больше текущего то идем в правое поддерево, иначе в левое, повторяем для поддерева, пока не найдем
или не упремся в нулевой указатель). А если говорить в целом, то это зависит от ситуации, конкретной структуры данных и от
аппаратных возможностей. Или я не понял суть вопроса)

Q: Удаление узла в дереве это всегда самое вкусное: какие ситуации нужно обязательно учесть при удалении? По моим подсчетам их 4.
A: При удалении Узла, я помещаю на его место минимальный элемент правого поддерева и балансирую, возможен вариант что правое
поддерево пустое, тогда по свойствам АВЛ дерева (баланс) либо узел это лист и мы его просто удаляем и затем выполняем балансировку,
либо у него единственный элемент в левом поддереве, тогда мы этот узел и ставим на место удаляемого узла. Как отделью ситуацию,
можно рассмотреть вариант того что узла с искомым ключом просто нет в дереве

